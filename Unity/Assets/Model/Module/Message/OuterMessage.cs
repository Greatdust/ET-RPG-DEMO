// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OuterMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETModel {

  #region Messages
  public partial class Actor_Test : pb::IMessage {
    private static readonly pb::MessageParser<Actor_Test> _parser = new pb::MessageParser<Actor_Test>(() => (Actor_Test)MessagePool.Instance.Fetch(typeof(Actor_Test)));
    public static pb::MessageParser<Actor_Test> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string info_ = "";
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Info.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Info);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      info_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Info = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_TestRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2M_TestRequest> _parser = new pb::MessageParser<C2M_TestRequest>(() => (C2M_TestRequest)MessagePool.Instance.Fetch(typeof(C2M_TestRequest)));
    public static pb::MessageParser<C2M_TestRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string request_ = "";
    public string Request {
      get { return request_; }
      set {
        request_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Request.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Request);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Request.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Request);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      request_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Request = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TestResponse : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TestResponse> _parser = new pb::MessageParser<M2C_TestResponse>(() => (M2C_TestResponse)MessagePool.Instance.Fetch(typeof(M2C_TestResponse)));
    public static pb::MessageParser<M2C_TestResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string response_ = "";
    public string Response {
      get { return response_; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Response.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Response);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Response.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Response);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      response_ = "";
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Response = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_TransferRequest : pb::IMessage {
    private static readonly pb::MessageParser<Actor_TransferRequest> _parser = new pb::MessageParser<Actor_TransferRequest>(() => (Actor_TransferRequest)MessagePool.Instance.Fetch(typeof(Actor_TransferRequest)));
    public static pb::MessageParser<Actor_TransferRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int mapIndex_;
    public int MapIndex {
      get { return mapIndex_; }
      set {
        mapIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MapIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MapIndex);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (MapIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mapIndex_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapIndex = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Actor_TransferResponse : pb::IMessage {
    private static readonly pb::MessageParser<Actor_TransferResponse> _parser = new pb::MessageParser<Actor_TransferResponse>(() => (Actor_TransferResponse)MessagePool.Instance.Fetch(typeof(Actor_TransferResponse)));
    public static pb::MessageParser<Actor_TransferResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_EnterMap : pb::IMessage {
    private static readonly pb::MessageParser<C2G_EnterMap> _parser = new pb::MessageParser<C2G_EnterMap>(() => (C2G_EnterMap)MessagePool.Instance.Fetch(typeof(C2G_EnterMap)));
    public static pb::MessageParser<C2G_EnterMap> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_EnterMap : pb::IMessage {
    private static readonly pb::MessageParser<G2C_EnterMap> _parser = new pb::MessageParser<G2C_EnterMap>(() => (G2C_EnterMap)MessagePool.Instance.Fetch(typeof(G2C_EnterMap)));
    public static pb::MessageParser<G2C_EnterMap> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long unitId_;
    /// <summary>
    /// 自己的unit id
    /// </summary>
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.UnitInfo> _repeated_units_codec
        = pb::FieldCodec.ForMessage(18, global::ETModel.UnitInfo.Parser);
    private pbc::RepeatedField<global::ETModel.UnitInfo> units_ = new pbc::RepeatedField<global::ETModel.UnitInfo>();
    /// <summary>
    /// 所有的unit
    /// </summary>
    public pbc::RepeatedField<global::ETModel.UnitInfo> Units {
      get { return units_; }
      set { units_ = value; }
    }

    private int frame_;
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      units_.WriteTo(output, _repeated_units_codec);
      if (Frame != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Frame);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      size += units_.CalculateSize(_repeated_units_codec);
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitId_ = 0;
      for (int i = 0; i < units_.Count; i++) { MessagePool.Instance.Recycle(units_[i]); }
      units_.Clear();
      frame_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 18: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
          case 24: {
            Frame = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2R_HeartBeat : pb::IMessage {
    private static readonly pb::MessageParser<C2R_HeartBeat> _parser = new pb::MessageParser<C2R_HeartBeat>(() => (C2R_HeartBeat)MessagePool.Instance.Fetch(typeof(C2R_HeartBeat)));
    public static pb::MessageParser<C2R_HeartBeat> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class R2C_HeartBeat : pb::IMessage {
    private static readonly pb::MessageParser<R2C_HeartBeat> _parser = new pb::MessageParser<R2C_HeartBeat>(() => (R2C_HeartBeat)MessagePool.Instance.Fetch(typeof(R2C_HeartBeat)));
    public static pb::MessageParser<R2C_HeartBeat> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class UnitInfo : pb::IMessage {
    private static readonly pb::MessageParser<UnitInfo> _parser = new pb::MessageParser<UnitInfo>(() => (UnitInfo)MessagePool.Instance.Fetch(typeof(UnitInfo)));
    public static pb::MessageParser<UnitInfo> Parser { get { return _parser; } }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    private global::ETModel.Vector3Info position_;
    public global::ETModel.Vector3Info Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    private global::ETModel.Vector3Info dir_;
    public global::ETModel.Vector3Info Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    private int groupIndex_;
    public int GroupIndex {
      get { return groupIndex_; }
      set {
        groupIndex_ = value;
      }
    }

    private int layerMask_;
    public int LayerMask {
      get { return layerMask_; }
      set {
        layerMask_ = value;
      }
    }

    private int unitLayer_;
    public int UnitLayer {
      get { return unitLayer_; }
      set {
        unitLayer_ = value;
      }
    }

    private int unitTag_;
    public int UnitTag {
      get { return unitTag_; }
      set {
        unitTag_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.UnitNumeric> _repeated_unitNumerics_codec
        = pb::FieldCodec.ForMessage(66, global::ETModel.UnitNumeric.Parser);
    private pbc::RepeatedField<global::ETModel.UnitNumeric> unitNumerics_ = new pbc::RepeatedField<global::ETModel.UnitNumeric>();
    public pbc::RepeatedField<global::ETModel.UnitNumeric> UnitNumerics {
      get { return unitNumerics_; }
      set { unitNumerics_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (dir_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Dir);
      }
      if (GroupIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GroupIndex);
      }
      if (LayerMask != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LayerMask);
      }
      if (UnitLayer != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(UnitLayer);
      }
      if (UnitTag != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(UnitTag);
      }
      unitNumerics_.WriteTo(output, _repeated_unitNumerics_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (dir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dir);
      }
      if (GroupIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupIndex);
      }
      if (LayerMask != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LayerMask);
      }
      if (UnitLayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitLayer);
      }
      if (UnitTag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnitTag);
      }
      size += unitNumerics_.CalculateSize(_repeated_unitNumerics_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      unitId_ = 0;
      if (position_ != null) MessagePool.Instance.Recycle(position_); position_ = null;
      if (dir_ != null) MessagePool.Instance.Recycle(dir_); dir_ = null;
      groupIndex_ = 0;
      layerMask_ = 0;
      unitLayer_ = 0;
      unitTag_ = 0;
      for (int i = 0; i < unitNumerics_.Count; i++) { MessagePool.Instance.Recycle(unitNumerics_[i]); }
      unitNumerics_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::ETModel.Vector3Info();
            }
            input.ReadMessage(position_);
            break;
          }
          case 26: {
            if (dir_ == null) {
              dir_ = new global::ETModel.Vector3Info();
            }
            input.ReadMessage(dir_);
            break;
          }
          case 32: {
            GroupIndex = input.ReadInt32();
            break;
          }
          case 40: {
            LayerMask = input.ReadInt32();
            break;
          }
          case 48: {
            UnitLayer = input.ReadInt32();
            break;
          }
          case 56: {
            UnitTag = input.ReadInt32();
            break;
          }
          case 66: {
            unitNumerics_.AddEntriesFrom(input, _repeated_unitNumerics_codec);
            break;
          }
        }
      }
    }

  }

  public partial class UnitNumeric : pb::IMessage {
    private static readonly pb::MessageParser<UnitNumeric> _parser = new pb::MessageParser<UnitNumeric>(() => (UnitNumeric)MessagePool.Instance.Fetch(typeof(UnitNumeric)));
    public static pb::MessageParser<UnitNumeric> Parser { get { return _parser; } }

    private int type_;
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private float value_;
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Value != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Value);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      type_ = 0;
      value_ = 0f;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 21: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_CreateUnits : pb::IMessage {
    private static readonly pb::MessageParser<M2C_CreateUnits> _parser = new pb::MessageParser<M2C_CreateUnits>(() => (M2C_CreateUnits)MessagePool.Instance.Fetch(typeof(M2C_CreateUnits)));
    public static pb::MessageParser<M2C_CreateUnits> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.UnitInfo> _repeated_units_codec
        = pb::FieldCodec.ForMessage(10, global::ETModel.UnitInfo.Parser);
    private pbc::RepeatedField<global::ETModel.UnitInfo> units_ = new pbc::RepeatedField<global::ETModel.UnitInfo>();
    public pbc::RepeatedField<global::ETModel.UnitInfo> Units {
      get { return units_; }
      set { units_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      units_.WriteTo(output, _repeated_units_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += units_.CalculateSize(_repeated_units_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < units_.Count; i++) { MessagePool.Instance.Recycle(units_[i]); }
      units_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Frame_ClickMap : pb::IMessage {
    private static readonly pb::MessageParser<Frame_ClickMap> _parser = new pb::MessageParser<Frame_ClickMap>(() => (Frame_ClickMap)MessagePool.Instance.Fetch(typeof(Frame_ClickMap)));
    public static pb::MessageParser<Frame_ClickMap> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private float z_;
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
      if (Id != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(Id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      x_ = 0f;
      y_ = 0f;
      z_ = 0f;
      rpcId_ = 0;
      actorId_ = 0;
      id_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
          case 752: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_InputResult_Move : pb::IMessage {
    private static readonly pb::MessageParser<M2C_InputResult_Move> _parser = new pb::MessageParser<M2C_InputResult_Move>(() => (M2C_InputResult_Move)MessagePool.Instance.Fetch(typeof(M2C_InputResult_Move)));
    public static pb::MessageParser<M2C_InputResult_Move> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.Vector3Info> _repeated_pathList_codec
        = pb::FieldCodec.ForMessage(10, global::ETModel.Vector3Info.Parser);
    private pbc::RepeatedField<global::ETModel.Vector3Info> pathList_ = new pbc::RepeatedField<global::ETModel.Vector3Info>();
    public pbc::RepeatedField<global::ETModel.Vector3Info> PathList {
      get { return pathList_; }
      set { pathList_ = value; }
    }

    private int frame_;
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      pathList_.WriteTo(output, _repeated_pathList_codec);
      if (Frame != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Frame);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
      if (Id != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(Id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      size += pathList_.CalculateSize(_repeated_pathList_codec);
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < pathList_.Count; i++) { MessagePool.Instance.Recycle(pathList_[i]); }
      pathList_.Clear();
      frame_ = 0;
      actorId_ = 0;
      id_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            pathList_.AddEntriesFrom(input, _repeated_pathList_codec);
            break;
          }
          case 16: {
            Frame = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
          case 752: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_Input_Move : pb::IMessage {
    private static readonly pb::MessageParser<C2M_Input_Move> _parser = new pb::MessageParser<C2M_Input_Move>(() => (C2M_Input_Move)MessagePool.Instance.Fetch(typeof(C2M_Input_Move)));
    public static pb::MessageParser<C2M_Input_Move> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private global::ETModel.Vector3Info aimPos_;
    public global::ETModel.Vector3Info AimPos {
      get { return aimPos_; }
      set {
        aimPos_ = value;
      }
    }

    private int frame_;
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (aimPos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AimPos);
      }
      if (Frame != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Frame);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
      if (Id != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(Id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (aimPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AimPos);
      }
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (aimPos_ != null) MessagePool.Instance.Recycle(aimPos_); aimPos_ = null;
      frame_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      id_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (aimPos_ == null) {
              aimPos_ = new global::ETModel.Vector3Info();
            }
            input.ReadMessage(aimPos_);
            break;
          }
          case 16: {
            Frame = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
          case 752: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_Input_UseSkill_Pos : pb::IMessage {
    private static readonly pb::MessageParser<C2M_Input_UseSkill_Pos> _parser = new pb::MessageParser<C2M_Input_UseSkill_Pos>(() => (C2M_Input_UseSkill_Pos)MessagePool.Instance.Fetch(typeof(C2M_Input_UseSkill_Pos)));
    public static pb::MessageParser<C2M_Input_UseSkill_Pos> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int frame_;
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    private string skillId_ = "";
    public string SkillId {
      get { return skillId_; }
      set {
        skillId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string pipelineSignal_ = "";
    public string PipelineSignal {
      get { return pipelineSignal_; }
      set {
        pipelineSignal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETModel.Vector3Info aimPos_;
    public global::ETModel.Vector3Info AimPos {
      get { return aimPos_; }
      set {
        aimPos_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Frame != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Frame);
      }
      if (SkillId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SkillId);
      }
      if (PipelineSignal.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PipelineSignal);
      }
      if (aimPos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AimPos);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
      if (Id != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(Id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      if (SkillId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkillId);
      }
      if (PipelineSignal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PipelineSignal);
      }
      if (aimPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AimPos);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      frame_ = 0;
      skillId_ = "";
      pipelineSignal_ = "";
      if (aimPos_ != null) MessagePool.Instance.Recycle(aimPos_); aimPos_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      id_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Frame = input.ReadInt32();
            break;
          }
          case 18: {
            SkillId = input.ReadString();
            break;
          }
          case 26: {
            PipelineSignal = input.ReadString();
            break;
          }
          case 34: {
            if (aimPos_ == null) {
              aimPos_ = new global::ETModel.Vector3Info();
            }
            input.ReadMessage(aimPos_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
          case 752: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_Input_UseSkill_Tar : pb::IMessage {
    private static readonly pb::MessageParser<C2M_Input_UseSkill_Tar> _parser = new pb::MessageParser<C2M_Input_UseSkill_Tar>(() => (C2M_Input_UseSkill_Tar)MessagePool.Instance.Fetch(typeof(C2M_Input_UseSkill_Tar)));
    public static pb::MessageParser<C2M_Input_UseSkill_Tar> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int frame_;
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    private string skillId_ = "";
    public string SkillId {
      get { return skillId_; }
      set {
        skillId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string pipelineSignal_ = "";
    public string PipelineSignal {
      get { return pipelineSignal_; }
      set {
        pipelineSignal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Frame != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Frame);
      }
      if (SkillId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SkillId);
      }
      if (PipelineSignal.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PipelineSignal);
      }
      if (UnitId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UnitId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
      if (Id != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(Id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      if (SkillId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkillId);
      }
      if (PipelineSignal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PipelineSignal);
      }
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      frame_ = 0;
      skillId_ = "";
      pipelineSignal_ = "";
      unitId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      id_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Frame = input.ReadInt32();
            break;
          }
          case 18: {
            SkillId = input.ReadString();
            break;
          }
          case 26: {
            PipelineSignal = input.ReadString();
            break;
          }
          case 32: {
            UnitId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
          case 752: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_Input_UseSkill_Dir : pb::IMessage {
    private static readonly pb::MessageParser<C2M_Input_UseSkill_Dir> _parser = new pb::MessageParser<C2M_Input_UseSkill_Dir>(() => (C2M_Input_UseSkill_Dir)MessagePool.Instance.Fetch(typeof(C2M_Input_UseSkill_Dir)));
    public static pb::MessageParser<C2M_Input_UseSkill_Dir> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int frame_;
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    private string skillId_ = "";
    public string SkillId {
      get { return skillId_; }
      set {
        skillId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string pipelineSignal_ = "";
    public string PipelineSignal {
      get { return pipelineSignal_; }
      set {
        pipelineSignal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETModel.Vector3Info aimDir_;
    public global::ETModel.Vector3Info AimDir {
      get { return aimDir_; }
      set {
        aimDir_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Frame != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Frame);
      }
      if (SkillId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SkillId);
      }
      if (PipelineSignal.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PipelineSignal);
      }
      if (aimDir_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AimDir);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
      if (Id != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(Id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      if (SkillId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkillId);
      }
      if (PipelineSignal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PipelineSignal);
      }
      if (aimDir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AimDir);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      frame_ = 0;
      skillId_ = "";
      pipelineSignal_ = "";
      if (aimDir_ != null) MessagePool.Instance.Recycle(aimDir_); aimDir_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      id_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Frame = input.ReadInt32();
            break;
          }
          case 18: {
            SkillId = input.ReadString();
            break;
          }
          case 26: {
            PipelineSignal = input.ReadString();
            break;
          }
          case 34: {
            if (aimDir_ == null) {
              aimDir_ = new global::ETModel.Vector3Info();
            }
            input.ReadMessage(aimDir_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
          case 752: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_InputResult_UseSkill_Dir : pb::IMessage {
    private static readonly pb::MessageParser<M2C_InputResult_UseSkill_Dir> _parser = new pb::MessageParser<M2C_InputResult_UseSkill_Dir>(() => (M2C_InputResult_UseSkill_Dir)MessagePool.Instance.Fetch(typeof(M2C_InputResult_UseSkill_Dir)));
    public static pb::MessageParser<M2C_InputResult_UseSkill_Dir> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int frame_;
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    private string skillId_ = "";
    public string SkillId {
      get { return skillId_; }
      set {
        skillId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private bool success_;
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    private string pipelineSignal_ = "";
    public string PipelineSignal {
      get { return pipelineSignal_; }
      set {
        pipelineSignal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETModel.Vector3Info dir_;
    public global::ETModel.Vector3Info Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Frame != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Frame);
      }
      if (SkillId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SkillId);
      }
      if (Success != false) {
        output.WriteRawTag(24);
        output.WriteBool(Success);
      }
      if (PipelineSignal.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PipelineSignal);
      }
      if (dir_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Dir);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
      if (Id != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(Id);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      if (SkillId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkillId);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (PipelineSignal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PipelineSignal);
      }
      if (dir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dir);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      frame_ = 0;
      skillId_ = "";
      success_ = false;
      pipelineSignal_ = "";
      if (dir_ != null) MessagePool.Instance.Recycle(dir_); dir_ = null;
      actorId_ = 0;
      id_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Frame = input.ReadInt32();
            break;
          }
          case 18: {
            SkillId = input.ReadString();
            break;
          }
          case 24: {
            Success = input.ReadBool();
            break;
          }
          case 34: {
            PipelineSignal = input.ReadString();
            break;
          }
          case 42: {
            if (dir_ == null) {
              dir_ = new global::ETModel.Vector3Info();
            }
            input.ReadMessage(dir_);
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
          case 752: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_Pushback : pb::IMessage {
    private static readonly pb::MessageParser<M2C_Pushback> _parser = new pb::MessageParser<M2C_Pushback>(() => (M2C_Pushback)MessagePool.Instance.Fetch(typeof(M2C_Pushback)));
    public static pb::MessageParser<M2C_Pushback> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int frame_;
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private global::ETModel.Vector3Info moveTarget_;
    public global::ETModel.Vector3Info MoveTarget {
      get { return moveTarget_; }
      set {
        moveTarget_ = value;
      }
    }

    private float time_;
    public float Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (moveTarget_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MoveTarget);
      }
      if (Time != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Time);
      }
      if (Frame != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(Frame);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Frame != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (moveTarget_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MoveTarget);
      }
      if (Time != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      if (moveTarget_ != null) MessagePool.Instance.Recycle(moveTarget_); moveTarget_ = null;
      time_ = 0f;
      frame_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            if (moveTarget_ == null) {
              moveTarget_ = new global::ETModel.Vector3Info();
            }
            input.ReadMessage(moveTarget_);
            break;
          }
          case 29: {
            Time = input.ReadFloat();
            break;
          }
          case 720: {
            Frame = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_HitEffect : pb::IMessage {
    private static readonly pb::MessageParser<M2C_HitEffect> _parser = new pb::MessageParser<M2C_HitEffect>(() => (M2C_HitEffect)MessagePool.Instance.Fetch(typeof(M2C_HitEffect)));
    public static pb::MessageParser<M2C_HitEffect> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETModel.Vector3Info pos_;
    public global::ETModel.Vector3Info Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    private string hitObjId_ = "";
    public string HitObjId {
      get { return hitObjId_; }
      set {
        hitObjId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private float duration_;
    public float Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
      if (HitObjId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HitObjId);
      }
      if (Duration != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Duration);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (HitObjId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HitObjId);
      }
      if (Duration != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (pos_ != null) MessagePool.Instance.Recycle(pos_); pos_ = null;
      hitObjId_ = "";
      duration_ = 0f;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pos_ == null) {
              pos_ = new global::ETModel.Vector3Info();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 18: {
            HitObjId = input.ReadString();
            break;
          }
          case 29: {
            Duration = input.ReadFloat();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_PlayEffect : pb::IMessage {
    private static readonly pb::MessageParser<M2C_PlayEffect> _parser = new pb::MessageParser<M2C_PlayEffect>(() => (M2C_PlayEffect)MessagePool.Instance.Fetch(typeof(M2C_PlayEffect)));
    public static pb::MessageParser<M2C_PlayEffect> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int frame_;
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private global::ETModel.Vector3Info pos_;
    public global::ETModel.Vector3Info Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    private string effectObjId_ = "";
    public string EffectObjId {
      get { return effectObjId_; }
      set {
        effectObjId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private float duration_;
    public float Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    private string buffSignal_ = "";
    public string BuffSignal {
      get { return buffSignal_; }
      set {
        buffSignal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private bool lockTarget_;
    public bool LockTarget {
      get { return lockTarget_; }
      set {
        lockTarget_ = value;
      }
    }

    private bool canBeInterupt_;
    public bool CanBeInterupt {
      get { return canBeInterupt_; }
      set {
        canBeInterupt_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
      if (EffectObjId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EffectObjId);
      }
      if (Duration != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Duration);
      }
      if (BuffSignal.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BuffSignal);
      }
      if (LockTarget != false) {
        output.WriteRawTag(40);
        output.WriteBool(LockTarget);
      }
      if (CanBeInterupt != false) {
        output.WriteRawTag(48);
        output.WriteBool(CanBeInterupt);
      }
      if (Frame != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(Frame);
      }
      if (Id != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(Id);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Frame != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      if (Id != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (EffectObjId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EffectObjId);
      }
      if (Duration != 0F) {
        size += 1 + 4;
      }
      if (BuffSignal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BuffSignal);
      }
      if (LockTarget != false) {
        size += 1 + 1;
      }
      if (CanBeInterupt != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (pos_ != null) MessagePool.Instance.Recycle(pos_); pos_ = null;
      effectObjId_ = "";
      duration_ = 0f;
      buffSignal_ = "";
      lockTarget_ = false;
      canBeInterupt_ = false;
      frame_ = 0;
      id_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pos_ == null) {
              pos_ = new global::ETModel.Vector3Info();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 18: {
            EffectObjId = input.ReadString();
            break;
          }
          case 29: {
            Duration = input.ReadFloat();
            break;
          }
          case 34: {
            BuffSignal = input.ReadString();
            break;
          }
          case 40: {
            LockTarget = input.ReadBool();
            break;
          }
          case 48: {
            CanBeInterupt = input.ReadBool();
            break;
          }
          case 720: {
            Frame = input.ReadInt32();
            break;
          }
          case 728: {
            Id = input.ReadInt64();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_PlaySound : pb::IMessage {
    private static readonly pb::MessageParser<M2C_PlaySound> _parser = new pb::MessageParser<M2C_PlaySound>(() => (M2C_PlaySound)MessagePool.Instance.Fetch(typeof(M2C_PlaySound)));
    public static pb::MessageParser<M2C_PlaySound> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int frame_;
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private string audioClipName_ = "";
    public string AudioClipName {
      get { return audioClipName_; }
      set {
        audioClipName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private float playSpeed_;
    public float PlaySpeed {
      get { return playSpeed_; }
      set {
        playSpeed_ = value;
      }
    }

    private float duration_;
    public float Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (AudioClipName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AudioClipName);
      }
      if (PlaySpeed != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PlaySpeed);
      }
      if (Duration != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Duration);
      }
      if (Frame != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(Frame);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Frame != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (AudioClipName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AudioClipName);
      }
      if (PlaySpeed != 0F) {
        size += 1 + 4;
      }
      if (Duration != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      audioClipName_ = "";
      playSpeed_ = 0f;
      duration_ = 0f;
      frame_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            AudioClipName = input.ReadString();
            break;
          }
          case 29: {
            PlaySpeed = input.ReadFloat();
            break;
          }
          case 37: {
            Duration = input.ReadFloat();
            break;
          }
          case 720: {
            Frame = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_GiveDamage : pb::IMessage {
    private static readonly pb::MessageParser<M2C_GiveDamage> _parser = new pb::MessageParser<M2C_GiveDamage>(() => (M2C_GiveDamage)MessagePool.Instance.Fetch(typeof(M2C_GiveDamage)));
    public static pb::MessageParser<M2C_GiveDamage> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETModel.DamageData> _repeated_damageDatas_codec
        = pb::FieldCodec.ForMessage(18, global::ETModel.DamageData.Parser);
    private pbc::RepeatedField<global::ETModel.DamageData> damageDatas_ = new pbc::RepeatedField<global::ETModel.DamageData>();
    public pbc::RepeatedField<global::ETModel.DamageData> DamageDatas {
      get { return damageDatas_; }
      set { damageDatas_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      damageDatas_.WriteTo(output, _repeated_damageDatas_codec);
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      size += damageDatas_.CalculateSize(_repeated_damageDatas_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      for (int i = 0; i < damageDatas_.Count; i++) { MessagePool.Instance.Recycle(damageDatas_[i]); }
      damageDatas_.Clear();
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            damageDatas_.AddEntriesFrom(input, _repeated_damageDatas_codec);
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_GiveAttackMissing : pb::IMessage {
    private static readonly pb::MessageParser<M2C_GiveAttackMissing> _parser = new pb::MessageParser<M2C_GiveAttackMissing>(() => (M2C_GiveAttackMissing)MessagePool.Instance.Fetch(typeof(M2C_GiveAttackMissing)));
    public static pb::MessageParser<M2C_GiveAttackMissing> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class DamageData : pb::IMessage {
    private static readonly pb::MessageParser<DamageData> _parser = new pb::MessageParser<DamageData>(() => (DamageData)MessagePool.Instance.Fetch(typeof(DamageData)));
    public static pb::MessageParser<DamageData> Parser { get { return _parser; } }

    private int damageType_;
    public int DamageType {
      get { return damageType_; }
      set {
        damageType_ = value;
      }
    }

    private int damageValue_;
    public int DamageValue {
      get { return damageValue_; }
      set {
        damageValue_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (DamageType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DamageType);
      }
      if (DamageValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DamageValue);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (DamageType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageType);
      }
      if (DamageValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageValue);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      damageType_ = 0;
      damageValue_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DamageType = input.ReadInt32();
            break;
          }
          case 16: {
            DamageValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_GiveHealth : pb::IMessage {
    private static readonly pb::MessageParser<M2C_GiveHealth> _parser = new pb::MessageParser<M2C_GiveHealth>(() => (M2C_GiveHealth)MessagePool.Instance.Fetch(typeof(M2C_GiveHealth)));
    public static pb::MessageParser<M2C_GiveHealth> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private int healthValue_;
    public int HealthValue {
      get { return healthValue_; }
      set {
        healthValue_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (HealthValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HealthValue);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (HealthValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HealthValue);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      healthValue_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            HealthValue = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_InterruptSkill : pb::IMessage {
    private static readonly pb::MessageParser<M2C_InterruptSkill> _parser = new pb::MessageParser<M2C_InterruptSkill>(() => (M2C_InterruptSkill)MessagePool.Instance.Fetch(typeof(M2C_InterruptSkill)));
    public static pb::MessageParser<M2C_InterruptSkill> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int frame_;
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Frame != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(Frame);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Frame != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      frame_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 720: {
            Frame = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_DisposeEmitObj : pb::IMessage {
    private static readonly pb::MessageParser<M2C_DisposeEmitObj> _parser = new pb::MessageParser<M2C_DisposeEmitObj>(() => (M2C_DisposeEmitObj)MessagePool.Instance.Fetch(typeof(M2C_DisposeEmitObj)));
    public static pb::MessageParser<M2C_DisposeEmitObj> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int frame_;
    public int Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private long unitId_;
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    private global::ETModel.Vector3Info pos_;
    public global::ETModel.Vector3Info Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (UnitId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UnitId);
      }
      if (pos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pos);
      }
      if (Frame != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(Frame);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Frame != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Frame);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      unitId_ = 0;
      if (pos_ != null) MessagePool.Instance.Recycle(pos_); pos_ = null;
      frame_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            UnitId = input.ReadInt64();
            break;
          }
          case 26: {
            if (pos_ == null) {
              pos_ = new global::ETModel.Vector3Info();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 720: {
            Frame = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class Vector3Info : pb::IMessage {
    private static readonly pb::MessageParser<Vector3Info> _parser = new pb::MessageParser<Vector3Info>(() => (Vector3Info)MessagePool.Instance.Fetch(typeof(Vector3Info)));
    public static pb::MessageParser<Vector3Info> Parser { get { return _parser; } }

    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private float z_;
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      x_ = 0f;
      y_ = 0f;
      z_ = 0f;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_PathfindingResult : pb::IMessage {
    private static readonly pb::MessageParser<M2C_PathfindingResult> _parser = new pb::MessageParser<M2C_PathfindingResult>(() => (M2C_PathfindingResult)MessagePool.Instance.Fetch(typeof(M2C_PathfindingResult)));
    public static pb::MessageParser<M2C_PathfindingResult> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    private float z_;
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    private static readonly pb::FieldCodec<float> _repeated_xs_codec
        = pb::FieldCodec.ForFloat(42);
    private pbc::RepeatedField<float> xs_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> Xs {
      get { return xs_; }
      set { xs_ = value; }
    }

    private static readonly pb::FieldCodec<float> _repeated_ys_codec
        = pb::FieldCodec.ForFloat(50);
    private pbc::RepeatedField<float> ys_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> Ys {
      get { return ys_; }
      set { ys_ = value; }
    }

    private static readonly pb::FieldCodec<float> _repeated_zs_codec
        = pb::FieldCodec.ForFloat(58);
    private pbc::RepeatedField<float> zs_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> Zs {
      get { return zs_; }
      set { zs_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Z);
      }
      xs_.WriteTo(output, _repeated_xs_codec);
      ys_.WriteTo(output, _repeated_ys_codec);
      zs_.WriteTo(output, _repeated_zs_codec);
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      size += xs_.CalculateSize(_repeated_xs_codec);
      size += ys_.CalculateSize(_repeated_ys_codec);
      size += zs_.CalculateSize(_repeated_zs_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      x_ = 0f;
      y_ = 0f;
      z_ = 0f;
      xs_.Clear();
      ys_.Clear();
      zs_.Clear();
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Z = input.ReadFloat();
            break;
          }
          case 42:
          case 45: {
            xs_.AddEntriesFrom(input, _repeated_xs_codec);
            break;
          }
          case 50:
          case 53: {
            ys_.AddEntriesFrom(input, _repeated_ys_codec);
            break;
          }
          case 58:
          case 61: {
            zs_.AddEntriesFrom(input, _repeated_zs_codec);
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2R_Ping : pb::IMessage {
    private static readonly pb::MessageParser<C2R_Ping> _parser = new pb::MessageParser<C2R_Ping>(() => (C2R_Ping)MessagePool.Instance.Fetch(typeof(C2R_Ping)));
    public static pb::MessageParser<C2R_Ping> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class R2C_Ping : pb::IMessage {
    private static readonly pb::MessageParser<R2C_Ping> _parser = new pb::MessageParser<R2C_Ping>(() => (R2C_Ping)MessagePool.Instance.Fetch(typeof(R2C_Ping)));
    public static pb::MessageParser<R2C_Ping> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_Test : pb::IMessage {
    private static readonly pb::MessageParser<G2C_Test> _parser = new pb::MessageParser<G2C_Test>(() => (G2C_Test)MessagePool.Instance.Fetch(typeof(G2C_Test)));
    public static pb::MessageParser<G2C_Test> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public partial class C2M_Reload : pb::IMessage {
    private static readonly pb::MessageParser<C2M_Reload> _parser = new pb::MessageParser<C2M_Reload>(() => (C2M_Reload)MessagePool.Instance.Fetch(typeof(C2M_Reload)));
    public static pb::MessageParser<C2M_Reload> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string account_ = "";
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = "";
      password_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_Reload : pb::IMessage {
    private static readonly pb::MessageParser<M2C_Reload> _parser = new pb::MessageParser<M2C_Reload>(() => (M2C_Reload)MessagePool.Instance.Fetch(typeof(M2C_Reload)));
    public static pb::MessageParser<M2C_Reload> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
