syntax = "proto3";
package ETModel;

message Actor_Test // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	string Info = 1;
}

message C2M_TestRequest // IActorLocationRequest
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	string request = 1;
}

message M2C_TestResponse // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string response = 1;
}

message Actor_TransferRequest // IActorLocationRequest
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int32 MapIndex = 1;
}

message Actor_TransferResponse // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

message C2G_EnterMap // IRequest
{
	int32 RpcId = 90;
}

message G2C_EnterMap // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	// 自己的unit id
	int64 UnitId = 1;
	// 所有的unit
	repeated UnitInfo Units = 2;
	int32 frame = 3;
	
}

message C2R_HeartBeat //IRequest
{
    int32 RpcId = 90;
}

message R2C_HeartBeat //IResponse
{
    int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

message UnitInfo
{
	int64 UnitId  = 1;

	Vector3Info Position = 2;
	Vector3Info Dir = 3;
	int32 groupIndex = 4;
	int32 layerMask = 5;
	int32 unitLayer = 6;
	int32 unitTag = 7;
	
	repeated UnitNumeric unitNumerics = 8;
}

message UnitNumeric
{
    int32 type = 1;
	float value = 2;
}

message M2C_CreateUnits // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
    repeated UnitInfo Units = 1;
}

message Frame_ClickMap // IActorLocationMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int64 Id = 94;
	
	float X = 1;
	float Y = 2;
	float Z = 3;
}

message M2C_InputResult_Move // IActorMessage
{
	int64 ActorId = 93;
	int64 Id = 94;
	
	repeated Vector3Info pathList = 1;
	
	int32 frame = 2;
}

message C2M_Input_Move // IActorLocationMessage
{
    int32 RpcId = 90;
	int64 ActorId = 93;
	int64 Id = 94;
	
	Vector3Info aimPos = 1; 
	int32 frame = 2;
}

message C2M_Input_UseSkill_Pos // IActorLocationMessage
{
    int32 RpcId = 90;
	int64 ActorId = 93;
	int64 Id = 94;
	
	int32 frame = 1; 
	string skillId = 2;
	string pipelineSignal = 3;
	Vector3Info aimPos = 4;	
}

message C2M_Input_UseSkill_Tar // IActorLocationMessage
{
    int32 RpcId = 90;
	int64 ActorId = 93;
	int64 Id = 94;
	
	int32 frame = 1; 
	string skillId = 2;
	string pipelineSignal = 3;
	int64 unitId = 4;	
}

message C2M_Input_UseSkill_Dir // IActorLocationMessage
{
    int32 RpcId = 90;
	int64 ActorId = 93;
	int64 Id = 94;
	
	int32 frame = 1; 
	string skillId = 2;
	string pipelineSignal = 3;
	Vector3Info aimDir = 4;	
}

message M2C_InputResult_UseSkill_Dir // IActorMessage
{
	int64 ActorId = 93;
	int64 Id = 94;
	
	int32 frame = 1; 
	string skillId = 2;
	bool success = 3;
	string pipelineSignal = 4;
	Vector3Info dir = 5;
}

message M2C_Pushback // IActorMessage
{
	int64 ActorId = 93;
	int32 frame = 90;
	
	int64 Id = 1;

	Vector3Info moveTarget = 2;
	float time = 3;
}

message M2C_HitEffect // IActorMessage
{
    int64 ActorId = 93;

	Vector3Info pos = 1;
	string hitObjId = 2;
	float duration = 3;
}

message M2C_PlayEffect // IActorMessage
{
    int64 ActorId = 93;
	int32 frame = 90;
	
	int64 Id = 91;
	Vector3Info pos = 1;
	string effectObjId = 2;
	float duration = 3;
	string buffSignal = 4;
	bool lockTarget = 5;
	bool canBeInterupt = 6;
}

message M2C_PlaySound // IActorMessage
{
    int64 ActorId = 93;	
	int32 frame = 90;
	
	int64 Id = 1;
	string audioClipName = 2;
	float playSpeed = 3;
	float duration = 4;
}

message M2C_GiveDamage // IActorMessage
{
    int64 ActorId = 93;	
	
	int64 Id = 1;
	repeated DamageData damageDatas = 2;
}

message M2C_GiveAttackMissing // IActorMessage
{
    int64 ActorId = 93;	
	
	int64 Id = 1;
}

message DamageData
{
	int32 damageType = 1;
	int32 damageValue = 2;
}

message M2C_GiveHealth // IActorMessage
{
    int64 ActorId = 93;	
	
	int64 Id = 1;
	int32 healthValue = 2;
}


message M2C_InterruptSkill // IActorMessage
{
    int64 ActorId = 93;	
	int32 frame = 90;
	
	int64 Id = 1;	
}


message M2C_DisposeEmitObj // IActorMessage
{
    int64 ActorId = 93;	
	int32 frame = 90;
	
	int64 Id = 1;	
	int64 unitId = 2;
	Vector3Info pos = 3;
}


message Vector3Info
{
    float X = 1;
	float Y = 2;
	float Z = 3;
}

message M2C_PathfindingResult // IActorMessage
{
	int64 ActorId = 93;
	
	int64 Id = 1;

	float X = 2;
	float Y = 3;
	float Z = 4;
	
	repeated float Xs = 5;
	repeated float Ys = 6;
	repeated float Zs = 7;
}


message C2R_Ping // IRequest
{
	int32 RpcId = 90;
}

message R2C_Ping // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

message G2C_Test // IMessage
{
}

message C2M_Reload // IRequest
{
	int32 RpcId = 90;
	string Account = 1;
	string Password = 2;
}

message M2C_Reload // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}